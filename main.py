
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import asyncio
import json
import random

API_TOKEN = "8087703446:AAEyCvWvjRAkwUhEgAB2YmqDaeajS3KAKBg"

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–ª—É–±–æ–≤ –∏ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π
with open("data/fifa_clubs.json", "r", encoding="utf-8") as f:
    clubs = json.load(f)

with open("data/challenges.json", "r", encoding="utf-8") as f:
    challenges = json.load(f)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
KeyboardButton("üåê Mini App", web_app=WebAppInfo(url="https://your-hosted-mini-app.com"))
main_kb.add(KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ä—Ç"), KeyboardButton("üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è"))
main_kb.add(KeyboardButton("üìú –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞"), KeyboardButton("üß† AI –ù–∞–≤–∏–≥–∞—Ç–æ—Ä (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"))

@dp.message_handler(content_types=["web_app_data"])
async def handle_web_app(message: types.Message):
    data = json.loads(message.web_app_data.data)
    position = data["position"]
    style = data["style"]
    level = data["level"]
    clubs = recommend_clubs(player_position=position, style=style, level=level)
    if not clubs:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª—É–±. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return
    club = random.choice(clubs)
    response = (
        f"üéØ –ö–∞—Ä—å–µ—Ä–∞ –ø–æ —Ç–≤–æ–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:\n"
        f"üèüÔ∏è {club['name']} ({club['league']})\n"
        f"üß† –°—Ç–∏–ª—å: {club['style']}\n"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {club['budget']}$"
    )
    await message.answer(response)

def recommend_clubs(player_position=None, style=None, level=None):
    from data import fifa_clubs  # –µ—Å–ª–∏ —É —Ç–µ–±—è –∫–ª—É–±—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –º–æ–¥—É–ª–µ
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ: clubs = –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ data/fifa_clubs.json

    with open("data/fifa_clubs.json", "r", encoding="utf-8") as f:
        clubs = json.load(f)

    result = []
    for club in clubs:
        if style and club["style"] != style:
            continue
        if player_position and player_position not in club.get("needs", []):
            continue
        if level:
            if level == "high" and club["budget"] < 50000000:
                continue
            if level == "mid" and not (10000000 <= club["budget"] <= 50000000):
                continue
            if level == "low" and club["budget"] > 10000000:
                continue
        result.append(club)
    return result

{
  "name": "Arsenal",
  "league": "Premier League",
  "budget": 75000000,
  "style": "possession",
  "needs": ["ST", "CB"]
}


@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî FIFA –ö–∞—Ä—å–µ—Ä–Ω—ã–π –ù–∞–≤–∏–≥–∞—Ç–æ—Ä ‚öΩ
–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∞—Ä—Ç")
async def random_start(message: types.Message):
    club = random.choice(clubs)
    response = (
        f"üé≤ **–¢–≤–æ—è —Å—É–¥—å–±–∞:**
"
        f"üèüÔ∏è –ö–ª—É–±: {club['name']} ({club['league']})
"
        f"üí∞ –ë—é–¥–∂–µ—Ç: {club['budget']}$
"
        f"üéØ –°—Ç–∏–ª—å –∏–≥—Ä—ã: {club['style']}
"
        f"üìå –ù—É–∂–Ω—ã –∏–≥—Ä–æ–∫–∏: {', '.join(club['needs'])}"
    )
    await message.answer(response, parse_mode="Markdown")

@dp.message_handler(lambda msg: msg.text == "üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è")
async def challenge(message: types.Message):
    challenge = random.choice(challenges)
    if challenge["type"] == "player":
        msg = (
            f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –∏–≥—Ä–æ–∫–∞:
"
            f"üèüÔ∏è –ö–ª—É–±: {challenge['club']}
"
            f"üìä –°—Ç–∞—Ä—Ç —Ä–µ–π—Ç–∏–Ω–≥: {challenge['start_rating']}
"
            f"üéØ –¶–µ–ª—å: {challenge['goal']}"
        )
    else:
        msg = (
            f"üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:
"
            f"üèüÔ∏è –ö–ª—É–±: {challenge['club']}
"
            f"üíº –ó–∞–¥–∞—á–∞: {challenge['goal']}
"
            f"üéöÔ∏è –°–ª–æ–∂–Ω–æ—Å—Ç—å: {challenge['difficulty']}"
        )
    await message.answer(msg)

@dp.message_handler(lambda msg: msg.text == "üìú –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—Ö–∞")
async def story(message: types.Message):
    await message.answer("üìñ –ò—Å—Ç–æ—Ä–∏—è: –ò–≥—Ä–æ–∫ –Ω–∞—á–∏–Ω–∞–ª –≤ Ligue 2, —Å—Ç–∞–ª –∑–≤–µ–∑–¥–æ–π –†–µ–∞–ª–∞. (–≠—Ç–æ –¥–µ–º–æ, –±—É–¥–µ—Ç –Ω–∞ –±–∞–∑–µ —Å–µ–π–≤–æ–≤)")

@dp.message_handler(lambda msg: msg.text == "üéÆ –ù–∞—á–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É")
async def start_career(message: types.Message):
    await message.answer("‚öôÔ∏è –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∫–∞—Ä—å–µ—Ä—ã:
(–≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –±—É–¥–µ—Ç –≤—ã–±–æ—Ä –ø–æ–∑–∏—Ü–∏–∏/–∫–ª—É–±–∞)")

@dp.message_handler(lambda msg: msg.text == "üß† AI –ù–∞–≤–∏–≥–∞—Ç–æ—Ä (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
async def ai_nav(message: types.Message):
    await message.answer("üß† –í –±—É–¥—É—â–µ–º —Ç—ã —Å–º–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å: '–•–æ—á—É –∫–∞—Ä—å–µ—Ä—É –∫–∞–∫ —É –•–æ–ª–ª–∞–Ω–¥–∞', –∏ —è –≤—Å—ë —Å–¥–µ–ª–∞—é —Å–∞–º!")

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    executor.start_polling(dp, skip_updates=True)
